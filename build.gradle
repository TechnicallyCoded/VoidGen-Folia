import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.guardsquare', name: 'proguard-gradle', version: '7.2.0-beta2'
    }
}

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.5'
}

group = project.plugin_group as Object
version = project.plugin_version as Object

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT'
    implementation 'com.github.technicallycoded:FoliaLib:v0.4.3'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
}

processResources {
    def properties = [version: project.plugin_version, name: project.plugin_name,
                      group  : project.plugin_group, website: project.plugin_website,
                      author : project.plugin_author]
    inputs.properties properties
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand properties
    }
}

shadowJar {
    archiveClassifier = ''

    exclude 'org/intellij/**'
    exclude 'org/jetbrains/**'

    minimize {
        exclude dependency("com.github.technicallycoded:FoliaLib:.*")
        exclude dependency("org.apache.commons:commons-lang3:.*")
    }

    relocate 'com.tcoded.folialib', 'de.xtkq.voidgen.lib.folialib'

}

def proguardOutFile = rootProject.file("$buildDir/libs/release.jar")
def jarFile = shadowJar.outputs.files.singleFile
task proguard(type: ProGuardTask) {
    dependsOn shadowJar

    outputs.upToDateWhen { false }
    configuration 'configuration.pro'

    injars jarFile
    outjars proguardOutFile
    libraryjars files(configurations.compileClasspath.collect())
    // Java 8
    libraryjars "${System.getProperty("java.home")}/lib/rt.jar"
    // Java 9+ compatibility
    libraryjars "${System.getProperty("java.home")}/jmods/java.base.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/java.desktop.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/java.logging.jmod"
    libraryjars "${System.getProperty("java.home")}/jmods/jdk.unsupported.jmod"
}

jar.finalizedBy proguard
proguard.doLast {
    if (!jarFile.delete()) throw new IllegalStateException()
    if (!proguardOutFile.renameTo(jarFile)) throw new IllegalStateException()
}